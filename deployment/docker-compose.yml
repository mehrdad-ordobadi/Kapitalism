services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - /home/azureuser/zookeeper/data:/opt/zookeeper-3.4.13/data
    environment:
      - TARGET_ENV=test    

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"  # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka-server.westus.cloudapp.azure.com  # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka-server.westus.cloudapp.azure.com:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      TARGET_ENV: test
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/azureuser/kafka:/kafka/kafka-logs
    depends_on:
      - zookeeper
    healthcheck:
        test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
        interval: 30s
        timeout: 10s
        retries: 3
        start_period: 30s

  db:
    image: mysql:5.7
    restart: always
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TARGET_ENV=test
    ports:
      - '3306:3306'
    expose:
      - '3306'
    env_file:
      - .env
    volumes:
      - my-db:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  receiver:
    image: mehrdadfordobadi/cap-receiver
    pull_policy: always
    ports:
      - "8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - TARGET_ENV=test  
    volumes:
      - /home/azureuser/config/receiver:/app/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"

  data-storage:
    image: mehrdadfordobadi/cap-storage
    pull_policy: always
    ports:
      - "8090"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TARGET_ENV=test
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - /home/azureuser/config/storage:/app/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"
      
  processing-service:
    image: mehrdadfordobadi/cap-service
    pull_policy: always
    ports:
      - "8100"
    depends_on:
      - data-storage
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/processing:/app/config
      - /home/azureuser/logs:/logs
      - processing-db:/data
    networks:
      - "api.network"

  analyzer:
    image: mehrdadfordobadi/cap-analyzer
    pull_policy: always
    ports:
      - "8110"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/analyzer:/app/config
      - /home/azureuser/logs:/logs
    networks:
      - "api.network"

  anomaly-detector:
    image: mehrdadfordobadi/cap-anomaly
    pull_policy: always
    ports:
      - "8120"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - TARGET_ENV=test
    volumes:
      - /home/azureuser/config/anomaly:/app/config
      - /home/azureuser/logs:/logs
      - anomaly-db:/data
    networks:
      - "api.network"

  dashboard:
    build: ../Dashboard-ui
    ports:
      - "3000"
    depends_on:
      - "processing-service"
      - "analyzer"
      - "anomaly-detector"
    environment:
      - TARGET_ENV=test
    networks:
      - "api.network"

  nginx:
    image: nginx:latest
    # Connects the conf file of the container to the conf file in our folder
    volumes:
      - /home/azureuser/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    # It will start up the nginx only when all api containers have started
    depends_on:
      - "receiver"
      - "data-storage"
      - "processing-service"
      - "analyzer"
      - "anomaly-detector"
      - "dashboard"
    # Connects the port 80 of the nginx container to localhost:80 or localhost
    ports:
      - "80:80"
    networks:
      - "api.network"

volumes:
  my-db:
  processing-db:
  anomaly-db:

networks:
  api.network: