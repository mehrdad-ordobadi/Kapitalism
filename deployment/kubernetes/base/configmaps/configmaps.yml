# configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: receiver-config
  namespace: ecommerce
data:
  app_config.yml: |
    version: 1
    add-product:
      url: http://data-storage:8090/add-product
    add-review:
      url: http://data-storage:8090/add-review
    events:
      hostname: kafka
      port: 9092
      topic: events
    kafka:
      max_retries: 3
      retry_delay: 5
  log_config.yml: |
    version: 1
    disable_existing_loggers: False
    formatters:
      simple:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        level: DEBUG
        formatter: simple
        filename: app.log
    loggers:
      basicLogger:
        level: DEBUG
        handlers: [console, file]
        propagate: no
    root:
      level: DEBUG
      handlers: [console]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: data-storage-config
  namespace: ecommerce
data:
  app_config.yml: |
    version: 1
    datastore:
      hostname: mysql
      port: 3306
    events:
      hostname: kafka
      port: 9092
      topic: events
    kafka:
      max_retries: 3
      retry_delay: 5
  log_config.yml: |
    version: 1
    disable_existing_loggers: False
    formatters:
      simple:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        level: DEBUG
        formatter: simple
        filename: app.log
    loggers:
      basicLogger:
        level: DEBUG
        handlers: [console, file]
        propagate: no
    root:
      level: DEBUG
      handlers: [console]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: processing-config
  namespace: ecommerce
data:
  app_config.yml: |
    version: 1
    datastore:
      filename: /data/data.json
    scheduler:
      period_sec: 5
    eventstore:
      url: http://data-storage:8090/storage
  log_config.yml: |
    version: 1
    disable_existing_loggers: False
    formatters:
      simple:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        level: DEBUG
        formatter: simple
        filename: app.log
    loggers:
      basicLogger:
        level: DEBUG
        handlers: [console, file]
        propagate: no
    root:
      level: DEBUG
      handlers: [console]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: analyzer-config
  namespace: ecommerce
data:
  app_config.yml: |
    events:
      hostname: kafka
      port: 9092
      topic: events
  log_config.yml: |
    version: 1
    disable_existing_loggers: False
    formatters:
      simple:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        level: DEBUG
        formatter: simple
        filename: app.log
    loggers:
      basicLogger:
        level: DEBUG
        handlers: [console, file]
        propagate: no
    root:
      level: DEBUG
      handlers: [console]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: anomaly-config
  namespace: ecommerce
data:
  app_config.yml: |
    events:
      hostname: kafka
      port: 9092
      topic: events
    kafka:
      max_retries: 3
      retry_delay: 5
    datastore:
      filename: "/data/anomalies.json"
    anomaly:
      thresholds:
        price_max: 3000
        stock_min: 10
  log_config.yml: |
    version: 1
    disable_existing_loggers: False
    formatters:
      simple:
        format: '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        level: DEBUG
        formatter: simple
        filename: app.log
    loggers:
      basicLogger:
        level: DEBUG
        handlers: [console, file]
        propagate: no
      pykafka:
        level: INFO
    root:
      level: DEBUG
      handlers: [console]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
  namespace: ecommerce
data:
  init.sql: |
    USE ecommerce;
    
    CREATE TABLE IF NOT EXISTS product (
      id INT AUTO_INCREMENT PRIMARY KEY,
      name VARCHAR(250) NOT NULL,
      model VARCHAR(250) NOT NULL,
      build_year INT NOT NULL,
      price DECIMAL(10, 2) NOT NULL,
      category VARCHAR(250),
      stock_quantity INT NOT NULL,
      trace_id VARCHAR(36) NOT NULL,
      creation_date BIGINT NOT NULL
    ) ENGINE=InnoDB;
    
    CREATE TABLE IF NOT EXISTS review (
      id INT AUTO_INCREMENT PRIMARY KEY,
      user_uuid VARCHAR(36) NOT NULL,
      product_id INT NOT NULL,
      rating INT NOT NULL,
      review_text TEXT NOT NULL,
      title VARCHAR(250) NOT NULL,
      submission_date VARCHAR(100) NOT NULL,
      creation_date BIGINT NOT NULL,
      trace_id VARCHAR(36) NOT NULL,
      FOREIGN KEY (product_id) REFERENCES product (id)
    ) ENGINE=InnoDB;

---
apiVersion: batch/v1
kind: Job
metadata:
  name: mysql-init-job
  namespace: ecommerce
spec:
  template:
    spec:
      containers:
      - name: mysql-init
        image: mysql:8.0
        command:
        - /bin/bash
        - -c
        - |
          echo "Waiting for MySQL to be ready..."
          until mysql -h mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1"; do
            sleep 2
          done
          echo "MySQL is ready. Initializing database..."
          mysql -h mysql -u $MYSQL_USER -p$MYSQL_PASSWORD < /docker-entrypoint-initdb.d/init.sql
          echo "Database initialization complete!"
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secrets
              key: MYSQL_PASSWORD
        volumeMounts:
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: init-script
        configMap:
          name: mysql-init-script
      restartPolicy: Never
  backoffLimit: 5

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dashboard-config
  namespace: ecommerce
data:
  env-config.js: |
    window.REACT_APP_API_BASE = "http://ecommerce.local";
